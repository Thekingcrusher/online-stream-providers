{
  "id":"anicrush",
  "name":"Anicrush",
  "version":"1.0.0",
  "manifestURI":"",
  "language":"typescript",
  "type":"onlinestream-provider",
  "description":"Anicrush is an online stream provider for both sub and dub with soft subs.",
  "author":"Thekingcrusher",
  "icon":"",
  "website":"",
  "lang":"en",
  "payload":"/// \u003creference path=\"./online-streaming-provider.d.ts\" /\u003e\n\nclass Provider {\n  private baseUrl = \"https://anicrush.to\";\n\n  getSettings(): Settings {\n    return {\n      episodeServers: [\"Southcloud-2\", \"Southcloud-3\"],\n      supportsDub: true,\n    };\n  }\n\n  async search(query: SearchOptions): Promise\u003cSearchResult[]\u003e {\n    const res = await fetch(\n      `https://api.anicrush.to/shared/v2/movie/list?keyword=${encodeURIComponent(query.query)}\u0026limit=24\u0026page=1`,\n      {\n        headers: {\n          \"User-Agent\": \"Mozilla/5.0\",\n          \"Accept\": \"application/json\",\n          \"Referer\": this.baseUrl + \"/\",\n          \"Origin\": this.baseUrl,\n          \"X-Site\": \"anicrush\",\n        },\n      }\n    );\n  \n    const json = await res.json();\n    const movies = json?.result?.movies ?? [];\n  \n    const results: SearchResult[] = [];\n  \n    for (const movie of movies) {\n      const hasDub = movie.has_dub === 1;\n      const subOrDub: SubOrDub = query.dub ? \"dub\" : \"sub\";\n  \n      // Only return dubs if requested\n      if (query.dub \u0026\u0026 !hasDub) continue;\n  \n      results.push({\n        id: `${movie.id}/${subOrDub}`,\n        title: movie.name,\n        url: `${this.baseUrl}/watch/${movie.slug}`,\n        subOrDub,\n      });\n    }\n  \n    return results;\n  }\n\n  async findEpisodes(Id: string): Promise\u003cEpisode[]\u003e {\n    const [id, lang] = Id.split(\"/\");\n    const subOrDub: SubOrDub = lang === \"dub\" ? \"dub\" : \"sub\";\n\n    const epRes = await fetch(\n      `https://api.anicrush.to/shared/v2/episode/list?_movieId=${id}`,\n      {\n        headers: {\n          \"User-Agent\": \"Mozilla/5.0\",\n          \"Accept\": \"application/json\",\n          \"Referer\": this.baseUrl + \"/\",\n          \"Origin\": this.baseUrl,\n          \"X-Site\": \"anicrush\",\n        },\n      }\n    );\n\n    const epJson = await epRes.json();\n    const episodeGroups = epJson?.result ?? {};\n    const episodes: Episode[] = [];\n\n    for (const group of Object.values(episodeGroups)) {\n      if (!Array.isArray(group)) continue;\n\n      for (const ep of group) {\n        episodes.push({\n          id: `${id}/${subOrDub}`,\n          number: ep.number,\n          title: ep.name_english,\n          url: \"\",\n        });\n      }\n    }\n\n    return episodes;\n  }\n\n  async findEpisodeServer(episode: EpisodeDetails, _server: string): Promise\u003cEpisodeServer\u003e {\n    const [id, subOrDubRaw] = episode.id.split(\"/\");\n    const subOrDub: SubOrDub = subOrDubRaw === \"dub\" ? \"dub\" : \"sub\";\n  \n    const serverMap: Record\u003cstring, number\u003e = {\n      \"Southcloud-1\": 4,\n      \"Southcloud-2\": 1,\n      \"Southcloud-3\": 6,\n    };\n  \n    const sv = serverMap[_server] ?? 4;\n  \n    const encryptedLinkUrl = `https://api.anicrush.to/shared/v2/episode/sources?_movieId=${id}\u0026ep=${episode.number}\u0026sv=${sv}\u0026sc=${subOrDub}`;\n  \n    try {\n      const res = await fetch(encryptedLinkUrl, {\n        headers: {\n          \"User-Agent\": \"Mozilla/5.0\",\n          \"Accept\": \"application/json\",\n          \"Referer\": this.baseUrl + \"/\",\n          \"Origin\": this.baseUrl,\n          \"X-Site\": \"anicrush\",\n        },\n      });\n  \n      const json = await res.json();\n      const encryptedIframe = json?.result?.link;\n      if (!encryptedIframe) throw new Error(\"Missing encrypted iframe link\");\n  \n      const decryptRes = await fetch(\n        `https://ac-api.ofchaos.com/api/anime/embed/convert/v2?embedUrl=${encodeURIComponent(encryptedIframe)}`\n      );\n      const decryptJson = await decryptRes.json();\n  \n      if (!decryptJson?.result?.sources?.length) throw new Error(\"No video sources\");\n  \n      const streamSource =\n        decryptJson.result.sources.find((s: any) =\u003e s.type === \"hls\") ||\n        decryptJson.result.sources.find((s: any) =\u003e s.type === \"mp4\");\n  \n      if (!streamSource?.file) throw new Error(\"No valid stream file found\");\n  \n      const subtitleTracks =\n        decryptJson.result.tracks?.filter((t: any) =\u003e t.kind === \"captions\") ?? [];\n  \n      const subtitles = subtitleTracks.map((track: any, index: number) =\u003e ({\n        id: `sub-${index}`,\n        language: track.label || \"Unknown\",\n        url: track.file,\n        isDefault: !!track.default,\n      }));\n  \n      return {\n        server: _server,\n        headers: {\n          \"Access-Control-Allow-Origin\": \"*\",\n          \"Access-Control-Allow-Headers\": \"*\",\n          \"Access-Control-Allow-Methods\": \"*\",\n        },\n        videoSources: [\n          {\n            url: streamSource.file,\n            type: streamSource.type,\n            quality: \"auto\",\n            subtitles,\n          },\n        ],\n      };\n    } catch (err) {\n      console.warn(`Failed on ${_server}`, err);\n      throw new Error(`No stream found for ${_server}`);\n    }\n  }\n}"
}
